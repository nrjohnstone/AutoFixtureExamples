using System.Collections.Generic;
using System.Linq;
using FluentAssertions;
using NUnit.Framework;
using Ploeh.AutoFixture;
using Ploeh.AutoFixture.NUnit2;

namespace AutoFixtureExamples
{
    [TestFixture]
    public class TestDataGenerationExamples
    {
        [Test]
        public void AutoGenerateIntValues()
        {
            EchoClass sut = new EchoClass();

            Fixture fixture = new Fixture();
            int expectedNumber = fixture.Create<int>();

            // Act
            int result = (int) sut.Echo(expectedNumber);

            // Assert
            result.Should().Be(expectedNumber);
        }

        [Test]
        public void AutoGenerateStringValues()
        {
            EchoClass sut = new EchoClass();

            Fixture fixture = new Fixture();
            string expectedString = fixture.Create<string>();

            // Act
            string result = (string)sut.Echo(expectedString);

            // Assert
            result.Should().Be(expectedString);
        }

        [Test]
        public void AutoGenerateStringValuesWithSeed()
        {
            EchoClass sut = new EchoClass();

            Fixture fixture = new Fixture();
            string expectedString = fixture.Create<string>("SeedPrefix");

            // Act
            string result = (string)sut.Echo(expectedString);

            // Assert
            result.Should().Be(expectedString);
            result.Should().StartWith("SeedPrefix");
        }

        [Test]
        public void AutoGenerateComplexTypes()
        {
            EchoClass sut = new EchoClass();

            Fixture fixture = new Fixture();
            DataClass expectedDataClass = fixture.Create<DataClass>();

            // Act
            DataClass resultDataClass = (DataClass)sut.Echo(expectedDataClass);

            // Assert
            resultDataClass.SomeStringField.Should().NotBeNullOrEmpty();
            resultDataClass.SomeStringField.Should().Be(expectedDataClass.SomeStringField);
            resultDataClass.WhoCaresWhatIntValue.Should().Be(expectedDataClass.WhoCaresWhatIntValue);
        }


        [Test]
        public void AutoGenerateAbstractTypesByRegister()
        {
            Fixture fixture = new Fixture();

            fixture.Register<ISomeInterface>(() => new ThingWithSomeInterface());
            ISomeInterface sut = fixture.Create<ISomeInterface>();

            // Assert
            sut.Should().NotBeNull();
            sut.Should().BeOfType<ThingWithSomeInterface>();
        }

        [Test]
        public void AutoGenerateCollectionOfStrings()
        {
            Fixture fixture = new Fixture();
            IEnumerable<string> testStrings = fixture.CreateMany<string>();
            
            // Assert
            testStrings.Should().NotBeNull();
            testStrings.Count().Should().Be(3);
        }

        [Test]
        public void AutoGenerateWithExplicitPropertySet()
        {
            Fixture fixture = new Fixture();
            DataClass dataClass = fixture.Build<DataClass>().Without(x => x.SomeStringField).Create();

            // Assert
            dataClass.SomeStringField.Should().BeNull();
            dataClass.SomeOtherStringField.Should().NotBeNullOrEmpty();
        }

        [Test]
        public void DisableExplicitProperty()
        {
            Fixture fixture = new Fixture();
            DataClass dataClass = fixture.Build<DataClass>().With(x => x.SomeStringField, "ExplictValue").Create();

            // Assert
            dataClass.SomeStringField.Should().Be("ExplictValue");
            dataClass.SomeOtherStringField.Should().NotBe("ExplicitValue");
                
        }

        [Test]
        public void CustomizeAutoGeneratedType()
        {
            Fixture fixture = new Fixture();

            fixture.Customize<DataClass>(obj => obj.With(x => x.SomeStringField, "ExplictValue"));

            var sut1 = fixture.Create<DataClass>();
            var sut2 = fixture.Create<DataClass>();

            // Assert
            sut1.SomeStringField.Should().Be("ExplictValue");
            sut2.SomeStringField.Should().Be("ExplictValue");
        }


        [Test]
        [AutoData]
        public void UsingAutoDataAttribute(int expectedNumber, EchoClass sut)
        {
            // Act
            int result = (int) sut.Echo(expectedNumber);

            // Assert
            result.Should().Be(expectedNumber);
        }

        [Test]
        public void UsingAutoFixtureAsFactoryToCreateSut()
        {
            Fixture fixture = new Fixture();

            int expectedNumber = fixture.Create<int>();
            EchoClass sut = fixture.Create<EchoClass>();

            // Act
            int result = (int) sut.Echo(expectedNumber);

            // Assert
            result.Should().Be(expectedNumber);
        }
    }

    public class ThingWithSomeInterface : ISomeInterface
    {
    }

    public interface ISomeInterface
    {
    }

    public class DataClass
    {
        public string SomeStringField;
        public string SomeOtherStringField;
        public int WhoCaresWhatIntValue { get; set; }
    }
}